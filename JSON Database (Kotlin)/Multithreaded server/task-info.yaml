type: edu
files:
  - name: test/JsonDatabaseTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      import org.junit.AfterClass;
      
      import java.io.File;
      import java.io.FileWriter;
      import java.io.IOException;
      import java.lang.management.ManagementFactory;
      import java.nio.file.Files;
      import java.nio.file.Path;
      import java.nio.file.Paths;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      
      public class JsonDatabaseTest extends StageTest<String> {
      
          private static final String OK_STATUS = "OK";
          private static final String ERROR_STATUS = "ERROR";
          private static final String NO_SUCH_KEY_REASON = "No such key";
      
          private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
      
          private static final String fileName = "db.json";
          private static final String clientDataPath = System.getProperty("user.dir") + File.separator +
              "src" + File.separator +
              "jsondatabase" + File.separator +
              "client" + File.separator +
              "data";
          private static final String dbFilePath = System.getProperty("user.dir") + File.separator +
              "src" + File.separator +
              "jsondatabase" + File.separator +
              "server" + File.separator +
              "data" + File.separator + fileName;
      
          private static int threadsCount;
      
          @DynamicTest(order = 1)
          CheckResult checkExit() {
      
              TestedProgram server = getServer();
              server.startInBackground();
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              TestedProgram client = getClient();
              client.start("-t", "exit");
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              if (!server.isFinished()) {
                  server.stop();
                  return CheckResult.wrong(WRONG_EXIT);
              }
      
              if (!Files.exists(Path.of(dbFilePath))) {
                  return CheckResult.wrong("Can't find /server/data/db.json file.");
              }
      
              try (FileWriter fileWriter = new FileWriter(new File(dbFilePath))) {
                  fileWriter.write("{}");
              } catch (IOException e) {
                  return CheckResult.wrong("Close the db.json file before starting the tests.");
              }
      
              if (!Files.exists(Paths.get(clientDataPath))) {
                  return CheckResult.correct();
              }
      
              String setRequest = JsonBuilder.newBuilder()
                  .addValue("type", "set")
                  .addValue("key", "name")
                  .addValue("value", "Kate")
                  .getAsJsonObject().toString();
      
              String getRequest = JsonBuilder.newBuilder()
                  .addValue("type", "get")
                  .addValue("key", "name")
                  .getAsJsonObject().toString();
      
              String deleteRequest = JsonBuilder.newBuilder()
                  .addValue("type", "delete")
                  .addValue("key", "name")
                  .getAsJsonObject().toString();
      
              try {
                  Files.write(Paths.get(clientDataPath + File.separator + "testSet.json"), setRequest.getBytes());
                  Files.write(Paths.get(clientDataPath + File.separator + "testGet.json"), getRequest.getBytes());
                  Files.write(Paths.get(clientDataPath + File.separator + "testDelete.json"), deleteRequest.getBytes());
              } catch (IOException e) {
                  throw new WrongAnswer("Can't create test files in /client/data/ folder.");
              }
      
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 2)
          CheckResult checkDataFolder() {
      
              if (!Files.exists(Paths.get(clientDataPath))) {
                  return CheckResult.wrong("Can't find /client/data/ folder.");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 3)
          CheckResult testInputs() throws InterruptedException {
      
              threadsCount = getThreadCount();
              TestedProgram server = getServer();
              server.startInBackground();
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              TestedProgram client;
              String output;
              String expectedValue;
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
      
              String requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              String responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "1")
                      .value("value", "Hello world!")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "1")
                      .value("value", "HelloWorld!")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", "HelloWorld!")
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "text", "-v", "Some text here");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "text")
                      .value("value", "Some text here")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "text");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "text")
                  );
              expectedValue = "Some text here";
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", expectedValue)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "56");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "56")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "56");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "56")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "100");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "100")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "That key doesn't exist");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "That key doesn't exist")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
              client = getClient();
              output = client.start("-in", "testSet.json");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "name")
                      .value("value", "Kate")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-in", "testGet.json");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "name")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", "Kate")
                  );
      
              client = getClient();
              output = client.start("-in", "testDelete.json");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "name")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
              client = getClient();
              output = client.start("-in", "testGet.json");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "name")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
              checkIfThreadWasCreated();
      
              client = getClient();
              client.start("-t", "exit");
      
              return CheckResult.correct();
          }
      
          private static TestedProgram getClient() {
              return new TestedProgram("jsondatabase.client");
          }
      
          private static TestedProgram getServer() {
              return new TestedProgram("jsondatabase.server");
          }
      
          private static int getThreadCount() {
              return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
          }
      
          private static void checkIfThreadWasCreated() {
              int total = getThreadCount();
      
               /*18 threads: 1 server thread and 17 client threads created during the test.
               If the server doesn't handle clients in a new thread then the difference between number of threads
               before and after the test should be equal 18 */
              if (total - threadsCount == 18) {
                  throw new WrongAnswer("Looks like you don't process client connection in another thread.\n" +
                      "Every client request should be parsed and handled in a separate thread!");
              }
          }
      
          @AfterClass
          public static void deleteFiles() {
              try {
                  Files.delete(Paths.get(clientDataPath + "testSet.json"));
                  Files.delete(Paths.get(clientDataPath + "testGet.json"));
                  Files.delete(Paths.get(clientDataPath + "testDelete.json"));
              } catch (IOException ignored) {
              }
          }
      }
    learner_created: false
  - name: test/JsonFinder.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class JsonFinder {
      
          private static final Pattern pattern = Pattern.compile("\\{.+}");
      
          public static String findRequestJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("type")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'type' key");
          }
      
          public static String findResponseJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("response")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'response' key");
          }
      }
    learner_created: false
  - name: test/JsonRequestBuilder.java
    visible: false
    text: |-
      import com.google.gson.Gson;
      import com.google.gson.JsonObject;
      
      class JsonBuilder {
      
          private final Gson gson = new Gson();
          private final JsonObject jsonObject = new JsonObject();
      
          private JsonBuilder() {
          }
      
          public static JsonBuilder newBuilder() {
              return new JsonBuilder();
          }
      
          public JsonBuilder addValue(String key, String value) {
              jsonObject.addProperty(key, value);
              return this;
          }
      
          public JsonBuilder addJsonObject(String key, JsonObject object) {
              jsonObject.add(key, object);
              return this;
          }
      
          public String getAsString() {
              return jsonObject.toString();
          }
      
          public JsonObject getAsJsonObject() {
              return jsonObject;
          }
      }
    learner_created: false
  - name: src/jsondatabase/client/client.kt
    visible: true
    text: |-
      package jsondatabase.client
      
      import kotlinx.serialization.Serializable
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      import java.io.DataInputStream
      import java.io.DataOutputStream
      import java.net.InetAddress
      import java.net.Socket
      
      fun main(args: Array<String>) {
          val typeOfRequest = args[1]
          val key = args.getOrNull(3)
      
          println("Client started!")
          val client = Client()
      
          when(typeOfRequest) {
              "set" -> {
                  var value = ""
                  for (i in 5 until args.size) {
                      value += args[i] + " "
                  }
                  value = value.trim()
      
                  val instance = ForSerialize(typeOfRequest, key, value)
                  val serialized = Json.encodeToString(instance)
                  client.output.writeUTF(serialized)
                  println("Sent: $serialized")
              }
              "get", "delete" -> {
                  val instance = ForSerialize(typeOfRequest, key)
                  val serialized = Json.encodeToString(instance)
                  client.output.writeUTF(serialized)
                  println("Sent: $serialized")
              }
              "exit" -> {
                  val instance = ForSerialize(typeOfRequest)
                  val serialized = Json.encodeToString(instance)
                  client.output.writeUTF(serialized)
                  println("Sent: $serialized")
              }
          }
          val messageFromServer = client.input.readUTF()
          println("Received: $messageFromServer\n")
      
          client.socket.close()
      }
      class Client {
          private val address = "127.0.0.1"
          private val port = 23456
          val socket = Socket(InetAddress.getByName(address), port)
          val input = DataInputStream(socket.getInputStream())
          val output = DataOutputStream(socket.getOutputStream())
      }
      @Serializable
      data class ForSerialize(val type: String, val key: String? = null, val value: String? = null)
      //@Serializable
      //class FromServer(val response: String, val reason: String? = null)
    learner_created: true
  - name: src/jsondatabase/server/Main.kt
    visible: true
    text: |-
      package jsondatabase.server
      
      import kotlinx.serialization.Serializable
      import kotlinx.serialization.decodeFromString
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      import java.io.DataInputStream
      import java.io.DataOutputStream
      import java.net.InetAddress
      import java.net.ServerSocket
      
      fun main() {
          val dataBase = mutableMapOf<String,String>()
          println("Server started!")
      
          while (true) {
              val address = "127.0.0.1"
              val port = 23456
              val server = ServerSocket(port, 50, InetAddress.getByName(address))
              val socket = server.accept()
              val input = DataInputStream(socket.getInputStream())
              val output = DataOutputStream(socket.getOutputStream())
      
              val messageFromClient = input.readUTF()
              val instant = Json.decodeFromString<FromClient>(messageFromClient)
      
              val typeOfRequest = instant.type
              val key = instant.key
      
              try {
                  when(typeOfRequest) {
                      "set" -> {
                          val value = instant.value
                          if (value != null) {
                              key?.let { dataBase.put(it, value) }
                          }
      
                          val instant2 = Json.encodeToString(ToClient("OK"))
                          output.writeUTF(instant2)
                      }
                      "get" -> {
                          val messageToClient = dataBase[key!!] ?: throw Exception("No such key")
                          val instant2 = Json.encodeToString(ToClient("OK", messageToClient))
                          output.writeUTF(instant2)
                      }
                      "delete" -> {
                          if (!dataBase.containsKey(key)) throw Exception("No such key")
                          dataBase.remove(key)
                          val instant2 = Json.encodeToString(ToClient("OK"))
                          output.writeUTF(instant2)
                      }
                      "exit" -> {
                          val instant2 = Json.encodeToString(ToClient("OK"))
                          output.writeUTF(instant2)
                          break
                      }
                  }
              } catch (e: Exception) {
                  val instant2 = Json.encodeToString(ToClient("ERROR", reason = e.message))
                  output.writeUTF(instant2)
              } finally {
                  socket.close()
                  server.close()
              }
          }
      }
      @Serializable
      data class FromClient(val type: String, val key: String? = null, val value: String? = null)
      @Serializable
      data class ToClient(val response: String, val value: String? = null ,val reason: String? = null)
    learner_created: true
  - name: src/jsondatabase/server/data/db.json
    visible: true
    learner_created: true
  - name: src/jsondatabase/client/data/testDelete.json
    visible: true
    learner_created: true
  - name: src/jsondatabase/client/data/testSet.json
    visible: true
    learner_created: true
  - name: src/jsondatabase/client/data/testGet.json
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/26263#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 30 Aug 2023 00:41:44 UTC"
record: 5
